<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Day10 - 音樂系統(1)</title>
    <link href="/2020/09/01/12thDay10/"/>
    <url>/2020/09/01/12thDay10/</url>
    
    <content type="html"><![CDATA[<p>昨天我們把架構很籠統的說了大概<br>今天的內容會專注在編程為主，discord.js的元素不會再多贅述<br>可能會比較枯燥一點<br>萬里長路始於足下，同學們加油~</p><h2 id="音樂總方法"><a href="#音樂總方法" class="headerlink" title="音樂總方法"></a>音樂總方法</h2><p><img src="https://i.imgur.com/5wwXNdo.png" alt="10-1"></p><p>新增一個音樂系統的分類，然後在底下創建MusicFunction方法<br>一併把OnMessage事件下的音樂指令導向這個方法<br>這樣Message事件就不會因為我們的程式碼肥大，進而影響閱讀</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MusicFunction</span><span class="hljs-params">(msg)</span> </span>&#123;<br>    <span class="hljs-comment">//將訊息內的前綴字截斷，後面的字是我們要的</span><br>    <span class="hljs-keyword">const</span> content = msg.content.substring(prefix[<span class="hljs-number">1</span>].Value.length);<br>    <span class="hljs-comment">//指定我們的間隔符號</span><br>    <span class="hljs-keyword">const</span> splitText = <span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-comment">//用間隔符號隔開訊息 contents[0] = 指令,contents[1] = 參數</span><br>    <span class="hljs-keyword">const</span> contents = content.split(splitText);<br><br>    <span class="hljs-keyword">switch</span> (contents[<span class="hljs-number">0</span>]) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;play&#x27;</span>:<br>            <span class="hljs-comment">//點歌&amp;播放歌曲功能</span><br>            playMusic(msg, contents);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;replay&#x27;</span>:<br>            <span class="hljs-comment">//重播當前歌曲</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;np&#x27;</span>:<br>            <span class="hljs-comment">//當前歌曲資訊</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;queue&#x27;</span>:<br>            <span class="hljs-comment">//歌曲清單</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;skip&#x27;</span>:<br>            <span class="hljs-comment">//中斷歌曲</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;disconnect&#x27;</span>:<br>            <span class="hljs-comment">//退出語音頻道並且清空歌曲清單</span><br>            disconnectMusic(msg.guild.id, msg.channel.id);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>按照昨天說的，我們分割字串後，用switch case把每個指令獨立出來<br>後面指令也會function化，用呼叫的更加美觀</p><h2 id="歌曲指令-play"><a href="#歌曲指令-play" class="headerlink" title="歌曲指令 play"></a>歌曲指令 play</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//?play</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">playMusic</span>(<span class="hljs-params">msg, contents</span>) </span>&#123;<br>    <span class="hljs-comment">//定義我們的第一個參數必需是網址</span><br>    <span class="hljs-keyword">const</span> urlED = contents[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//第一個參數不是連結就要篩選掉</span><br>        <span class="hljs-keyword">if</span> (urlED.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>) !== <span class="hljs-string">&#x27;http&#x27;</span>) <span class="hljs-keyword">return</span> msg.reply(<span class="hljs-string">&#x27;The link is not working.1&#x27;</span>);<br><br>        <span class="hljs-comment">//透過library判斷連結是否可運行</span><br>        <span class="hljs-keyword">const</span> validate = <span class="hljs-keyword">await</span> ytdl.validateURL(urlED);<br>        <span class="hljs-keyword">if</span> (!validate) <span class="hljs-keyword">return</span> msg.reply(<span class="hljs-string">&#x27;The link is not working.2&#x27;</span>);<br><br>        <span class="hljs-comment">//獲取歌曲資訊</span><br>        <span class="hljs-keyword">const</span> info = <span class="hljs-keyword">await</span> ytdl.getInfo(urlED);<br>        <span class="hljs-comment">//判斷資訊是否正常</span><br>        <span class="hljs-keyword">if</span> (info.videoDetails) &#123;<br>            <span class="hljs-comment">//指令下達者是否在語音頻道</span><br>            <span class="hljs-keyword">if</span> (msg.member.voice.channel) &#123;<br>                <span class="hljs-comment">//判斷bot是否已經連到語音頻道 是:將歌曲加入歌單 不是:進入語音頻道並且播放歌曲</span><br>                <span class="hljs-keyword">if</span> (!client.voice.connections.get(msg.guild.id)) &#123;<br>                    <span class="hljs-comment">//將歌曲加入歌單</span><br>                    musicList.push(urlED);<br>                    <span class="hljs-comment">//進入語音頻道</span><br>                    msg.member.voice.channel.join()<br>                        .then(<span class="hljs-function"><span class="hljs-params">connection</span> =&gt;</span> &#123;<br>                            msg.reply(<span class="hljs-string">&#x27;來了~&#x27;</span>);<br>                            <span class="hljs-keyword">const</span> guildID = msg.guild.id;<br>                            <span class="hljs-keyword">const</span> channelID = msg.channel.id;<br>                            <span class="hljs-comment">//播放歌曲</span><br>                            playMusic2(connection, guildID, channelID);<br>                        &#125;)<br>                        .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>                            msg.reply(<span class="hljs-string">&#x27;bot進入語音頻道時發生錯誤，請再試一次&#x27;</span>);<br>                            <span class="hljs-built_in">console</span>.log(err, <span class="hljs-string">&#x27;playMusicError2&#x27;</span>);<br>                        &#125;)<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//將歌曲加入歌單</span><br>                    musicList.push(urlED);<br>                    msg.reply(<span class="hljs-string">&#x27;已將歌曲加入歌單!&#x27;</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> msg.reply(<span class="hljs-string">&#x27;請先進入頻道:3...&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> msg.reply(<span class="hljs-string">&#x27;The link is not working.3&#x27;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-built_in">console</span>.log(err, <span class="hljs-string">&#x27;playMusicError&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/RGusrht.png" alt="10-2"></p><p>寫到這會發現需要一個填充歌曲列表的變數，歌曲列表應該是不管到哪一個音樂系統下都可以使用的，所以我們宣告在function外面(全域變數)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>?play 遞迴函式<br>async <span class="hljs-keyword">function</span> playMusic2(connection, guildID, channelID) &#123;<br>    try &#123;<br>        <span class="hljs-regexp">//</span>播放前歌曲清單不能沒有網址<br>        <span class="hljs-keyword">if</span> (musicList.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-regexp">//</span>設定音樂相關參數<br>            const streamOptions = &#123;<br>                seek: <span class="hljs-number">0</span>,<br>                volume: <span class="hljs-number">0.5</span>,<br>                Bitrate: <span class="hljs-number">192000</span>,<br>                Passes: <span class="hljs-number">1</span>,<br>                highWaterMark: <span class="hljs-number">1</span><br>            &#125;;<br>            <span class="hljs-regexp">//</span>讀取清單第一位網址<br>            const stream = await ytdl(musicList[<span class="hljs-number">0</span>], &#123;<br>                filter: <span class="hljs-string">&#x27;audioonly&#x27;</span>,<br>                quality: <span class="hljs-string">&#x27;highestaudio&#x27;</span>,<br>                highWaterMark: <span class="hljs-number">26214400</span> <span class="hljs-regexp">//</span><span class="hljs-number">25</span>ms<br>            &#125;)<br><br>            <span class="hljs-regexp">//</span>播放歌曲，並且存入dispatcher<br>            const dispatcher = connection.play(stream, streamOptions);<br>            <span class="hljs-regexp">//</span>監聽歌曲播放結束事件<br>            dispatcher.on(<span class="hljs-string">&quot;finish&quot;</span>, finish =&gt; &#123;<br>                <span class="hljs-regexp">//</span>將清單中第一首歌清除<br>                <span class="hljs-keyword">if</span> (musicList.length &gt; <span class="hljs-number">0</span>) musicList.shift();<br>                <span class="hljs-regexp">//</span>播放歌曲<br>                playMusic2(connection, guildID, channelID);<br>            &#125;)<br>        &#125; <span class="hljs-keyword">else</span> disconnectMusic(guildID, channelID); <span class="hljs-regexp">//</span>清空歌單並且退出語音頻道<br>    &#125; catch (err) &#123;<br>        console.log(err, <span class="hljs-string">&#x27;playMusic2Error&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="歌曲指令-disconnect"><a href="#歌曲指令-disconnect" class="headerlink" title="歌曲指令 disconnect"></a>歌曲指令 disconnect</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//?disconnect</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">disconnectMusic</span>(<span class="hljs-params">guildID, channelID</span>) </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//判斷bot是否在此群組的語音頻道</span><br>        <span class="hljs-keyword">if</span> (client.voice.connections.get(guildID)) &#123;<br>            <span class="hljs-comment">//清空歌曲清單</span><br>            musicList = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br>            <span class="hljs-comment">//退出語音頻道</span><br>            client.voice.connections.get(guildID).disconnect();<br><br>            client.channels.fetch(channelID).then(<span class="hljs-function"><span class="hljs-params">channel</span> =&gt;</span> channel.send(<span class="hljs-string">&#x27;晚安~&#x27;</span>));<br>        &#125; <span class="hljs-keyword">else</span> client.channels.fetch(channelID).then(<span class="hljs-function"><span class="hljs-params">channel</span> =&gt;</span> channel.send(<span class="hljs-string">&#x27;可是..我還沒進來:3&#x27;</span>))<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-built_in">console</span>.log(err, <span class="hljs-string">&#x27;disconnectMusicError&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到此，音樂系統的一個基本循環(播放-&gt;退出)就寫完了<br>明天我們繼續完善剩下的功能</p><p>以下是今天的程式碼</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//#region 全域變數</span><br><span class="hljs-keyword">const</span> Discord = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;discord.js&#x27;</span>);<br><span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> Discord.Client();<br><span class="hljs-keyword">const</span> ytdl = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ytdl-core&#x27;</span>);<br><span class="hljs-keyword">const</span> auth = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./JSONHome/auth.json&#x27;</span>);<br><span class="hljs-keyword">const</span> prefix = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./JSONHome/prefix.json&#x27;</span>);<br><br><span class="hljs-comment">//#endregion</span><br><br><span class="hljs-comment">//#region 登入</span><br>client.login(auth.key);<br><br>client.on(<span class="hljs-string">&#x27;ready&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Logged in as <span class="hljs-subst">$&#123;client.user.tag&#125;</span>!`</span>);<br>&#125;);<br><br><span class="hljs-comment">//#endregion</span><br><br><span class="hljs-comment">//#region message事件入口</span><br>client.on(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function"><span class="hljs-params">msg</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">//前置判斷</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (!msg.guild || !msg.member) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//訊息內不存在guild元素 = 非群組消息(私聊)</span><br>        <span class="hljs-keyword">if</span> (!msg.member.user) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//幫bot值多拉一層，判斷上層物件是否存在</span><br>        <span class="hljs-keyword">if</span> (msg.member.user.bot) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//訊息內bot值為正 = 此消息為bot發送</span><br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//字串分析</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">let</span> tempPrefix = <span class="hljs-string">&#x27;-1&#x27;</span>;<br>        <span class="hljs-keyword">const</span> prefixED = <span class="hljs-built_in">Object</span>.keys(prefix); <span class="hljs-comment">//前綴符號定義</span><br>        prefixED.forEach(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (msg.content.substring(<span class="hljs-number">0</span>, prefix[element].Value.length) === prefix[element].Value) &#123;<br>                tempPrefix = element;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">//實作</span><br>        <span class="hljs-keyword">switch</span> (tempPrefix) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-comment">//文字回應功能</span><br>                <span class="hljs-keyword">const</span> cmd = msg.content.substring(prefix[tempPrefix].Value.length).split(<span class="hljs-string">&#x27; &#x27;</span>); <span class="hljs-comment">//以空白分割前綴以後的字串</span><br>                <span class="hljs-keyword">switch</span> (cmd[<span class="hljs-number">0</span>]) &#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;ping&#x27;</span>:<br>                        msg.channel.send(<span class="hljs-string">&#x27;pong&#x27;</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;老婆&#x27;</span>:<br>                        msg.reply(<span class="hljs-string">&#x27;你沒有老婆!!&#x27;</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;myAvatar&#x27;</span>:<br>                        <span class="hljs-keyword">const</span> avatar = GetMyAvatar(msg);<br>                        <span class="hljs-keyword">if</span> (avatar.files) msg.channel.send(<span class="hljs-string">`<span class="hljs-subst">$&#123;msg.author&#125;</span>`</span>, avatar).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123; <span class="hljs-built_in">console</span>.log(err) &#125;);<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-comment">//音樂指令</span><br>                MusicFunction(msg);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;OnMessageError&#x27;</span>, err);<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">//#endregion</span><br><br><span class="hljs-comment">//#region 音樂系統</span><br><br><span class="hljs-comment">//歌曲清單</span><br><span class="hljs-keyword">let</span> musicList = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MusicFunction</span>(<span class="hljs-params">msg</span>) </span>&#123;<br>    <span class="hljs-comment">//將訊息內的前綴字截斷，後面的字是我們要的</span><br>    <span class="hljs-keyword">const</span> content = msg.content.substring(prefix[<span class="hljs-number">1</span>].Value.length);<br>    <span class="hljs-comment">//指定我們的間隔符號</span><br>    <span class="hljs-keyword">const</span> splitText = <span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-comment">//用間隔符號隔開訊息 contents[0] = 指令,contents[1] = 參數</span><br>    <span class="hljs-keyword">const</span> contents = content.split(splitText);<br><br>    <span class="hljs-keyword">switch</span> (contents[<span class="hljs-number">0</span>]) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;play&#x27;</span>:<br>            <span class="hljs-comment">//點歌&amp;播放歌曲功能</span><br>            playMusic(msg, contents);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;replay&#x27;</span>:<br>            <span class="hljs-comment">//重播當前歌曲</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;np&#x27;</span>:<br>            <span class="hljs-comment">//當前歌曲資訊</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;queue&#x27;</span>:<br>            <span class="hljs-comment">//歌曲清單</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;skip&#x27;</span>:<br>            <span class="hljs-comment">//中斷歌曲</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;disconnect&#x27;</span>:<br>            <span class="hljs-comment">//退出語音頻道並且清空歌曲清單</span><br>            disconnectMusic(msg.guild.id, msg.channel.id);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//?play</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">playMusic</span>(<span class="hljs-params">msg, contents</span>) </span>&#123;<br>    <span class="hljs-comment">//定義我們的第一個參數必需是網址</span><br>    <span class="hljs-keyword">const</span> urlED = contents[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//第一個參數不是連結就要篩選掉</span><br>        <span class="hljs-keyword">if</span> (urlED.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>) !== <span class="hljs-string">&#x27;http&#x27;</span>) <span class="hljs-keyword">return</span> msg.reply(<span class="hljs-string">&#x27;The link is not working.1&#x27;</span>);<br><br>        <span class="hljs-comment">//透過library判斷連結是否可運行</span><br>        <span class="hljs-keyword">const</span> validate = <span class="hljs-keyword">await</span> ytdl.validateURL(urlED);<br>        <span class="hljs-keyword">if</span> (!validate) <span class="hljs-keyword">return</span> msg.reply(<span class="hljs-string">&#x27;The link is not working.2&#x27;</span>);<br><br>        <span class="hljs-comment">//獲取歌曲資訊</span><br>        <span class="hljs-keyword">const</span> info = <span class="hljs-keyword">await</span> ytdl.getInfo(urlED);<br>        <span class="hljs-comment">//判斷資訊是否正常</span><br>        <span class="hljs-keyword">if</span> (info.videoDetails) &#123;<br>            <span class="hljs-comment">//指令下達者是否在語音頻道</span><br>            <span class="hljs-keyword">if</span> (msg.member.voice.channel) &#123;<br>                <span class="hljs-comment">//判斷bot是否已經連到語音頻道 是:將歌曲加入歌單 不是:進入語音頻道並且播放歌曲</span><br>                <span class="hljs-keyword">if</span> (!client.voice.connections.get(msg.guild.id)) &#123;<br>                    <span class="hljs-comment">//將歌曲加入歌單</span><br>                    musicList.push(urlED);<br>                    <span class="hljs-comment">//進入語音頻道</span><br>                    msg.member.voice.channel.join()<br>                        .then(<span class="hljs-function"><span class="hljs-params">connection</span> =&gt;</span> &#123;<br>                            msg.reply(<span class="hljs-string">&#x27;來了~&#x27;</span>);<br>                            <span class="hljs-keyword">const</span> guildID = msg.guild.id;<br>                            <span class="hljs-keyword">const</span> channelID = msg.channel.id;<br>                            <span class="hljs-comment">//播放歌曲</span><br>                            playMusic2(connection, guildID, channelID);<br>                        &#125;)<br>                        .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>                            msg.reply(<span class="hljs-string">&#x27;bot進入語音頻道時發生錯誤，請再試一次&#x27;</span>);<br>                            <span class="hljs-built_in">console</span>.log(err, <span class="hljs-string">&#x27;playMusicError2&#x27;</span>);<br>                        &#125;)<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//將歌曲加入歌單</span><br>                    musicList.push(urlED);<br>                    msg.reply(<span class="hljs-string">&#x27;已將歌曲加入歌單!&#x27;</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> msg.reply(<span class="hljs-string">&#x27;請先進入頻道:3...&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> msg.reply(<span class="hljs-string">&#x27;The link is not working.3&#x27;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-built_in">console</span>.log(err, <span class="hljs-string">&#x27;playMusicError&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//?play 遞迴函式</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">playMusic2</span>(<span class="hljs-params">connection, guildID, channelID</span>) </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//播放前歌曲清單不能沒有網址</span><br>        <span class="hljs-keyword">if</span> (musicList.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//設定音樂相關參數</span><br>            <span class="hljs-keyword">const</span> streamOptions = &#123;<br>                <span class="hljs-attr">seek</span>: <span class="hljs-number">0</span>,<br>                <span class="hljs-attr">volume</span>: <span class="hljs-number">0.5</span>,<br>                <span class="hljs-attr">Bitrate</span>: <span class="hljs-number">192000</span>,<br>                <span class="hljs-attr">Passes</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-attr">highWaterMark</span>: <span class="hljs-number">1</span><br>            &#125;;<br>            <span class="hljs-comment">//讀取清單第一位網址</span><br>            <span class="hljs-keyword">const</span> stream = <span class="hljs-keyword">await</span> ytdl(musicList[<span class="hljs-number">0</span>], &#123;<br>                <span class="hljs-attr">filter</span>: <span class="hljs-string">&#x27;audioonly&#x27;</span>,<br>                <span class="hljs-attr">quality</span>: <span class="hljs-string">&#x27;highestaudio&#x27;</span>,<br>                <span class="hljs-attr">highWaterMark</span>: <span class="hljs-number">26214400</span> <span class="hljs-comment">//25ms</span><br>            &#125;)<br><br>            <span class="hljs-comment">//播放歌曲，並且存入dispatcher</span><br>            <span class="hljs-keyword">const</span> dispatcher = connection.play(stream, streamOptions);<br>            <span class="hljs-comment">//監聽歌曲播放結束事件</span><br>            dispatcher.on(<span class="hljs-string">&quot;finish&quot;</span>, <span class="hljs-function"><span class="hljs-params">finish</span> =&gt;</span> &#123;<br>                <span class="hljs-comment">//將清單中第一首歌清除</span><br>                <span class="hljs-keyword">if</span> (musicList.length &gt; <span class="hljs-number">0</span>) musicList.shift();<br>                <span class="hljs-comment">//播放歌曲</span><br>                playMusic2(connection, guildID, channelID);<br>            &#125;)<br>        &#125; <span class="hljs-keyword">else</span> disconnectMusic(guildID, channelID); <span class="hljs-comment">//清空歌單並且退出語音頻道</span><br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-built_in">console</span>.log(err, <span class="hljs-string">&#x27;playMusic2Error&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//?disconnect</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">disconnectMusic</span>(<span class="hljs-params">guildID, channelID</span>) </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//判斷bot是否在此群組的語音頻道</span><br>        <span class="hljs-keyword">if</span> (client.voice.connections.get(guildID)) &#123;<br>            <span class="hljs-comment">//清空歌曲清單</span><br>            musicList = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br>            <span class="hljs-comment">//退出語音頻道</span><br>            client.voice.connections.get(guildID).disconnect();<br><br>            client.channels.fetch(channelID).then(<span class="hljs-function"><span class="hljs-params">channel</span> =&gt;</span> channel.send(<span class="hljs-string">&#x27;晚安~&#x27;</span>));<br>        &#125; <span class="hljs-keyword">else</span> client.channels.fetch(channelID).then(<span class="hljs-function"><span class="hljs-params">channel</span> =&gt;</span> channel.send(<span class="hljs-string">&#x27;可是..我還沒進來:3&#x27;</span>))<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-built_in">console</span>.log(err, <span class="hljs-string">&#x27;disconnectMusicError&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//#endregion</span><br><br><span class="hljs-comment">//#region 子類方法</span><br><span class="hljs-comment">//獲取頭像</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetMyAvatar</span>(<span class="hljs-params">msg</span>) </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">files</span>: [&#123;<br>                <span class="hljs-attr">attachment</span>: msg.author.displayAvatarURL(<span class="hljs-string">&#x27;png&#x27;</span>, <span class="hljs-literal">true</span>),<br>                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;avatar.jpg&#x27;</span><br>            &#125;]<br>        &#125;;<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;GetMyAvatar,Error&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//#endregion</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>鐵人賽</category>
      
      <category>用Node.js製作後台零負擔的DiscordBot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>node.js</tag>
      
      <tag>discord</tag>
      
      <tag>教學</tag>
      
      <tag>12th鐵人賽</tag>
      
      <tag>discord.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day9 - 註解摺疊與音樂系統介紹</title>
    <link href="/2020/09/01/12thDay9/"/>
    <url>/2020/09/01/12thDay9/</url>
    
    <content type="html"><![CDATA[<p>昨天我們把機器人的架構做了些修改，對功能做了分類<br>今天我們稍微整理一下程式，並且說說音樂系統；<br>如果正在觀看文章的小夥伴不需要音樂系統可以跳過接下來三天的內容，不會影響後續教學的!</p><h1 id="region"><a href="#region" class="headerlink" title="region"></a>region</h1><p><img src="https://i.imgur.com/oZB8tKp.png" alt="9-1"></p><p>開始寫音樂前，因為程式碼準備要開始增加了<br>筆者先對所有程式做了分類<br>#region<br>#endregion<br>被這兩段覆蓋的程式碼可以摺疊，摺疊後只看的到region後的字</p><p><img src="https://i.imgur.com/w6UlfLn.png" alt="9-2"></p><p>這個功能必須IDE有支援才可以使用，VSCode支援這個好用的收納方法，所以我們就好好利用一下!</p><hr><h1 id="函式庫安裝"><a href="#函式庫安裝" class="headerlink" title="函式庫安裝"></a>函式庫安裝</h1><p>那麼我們準備要開始音樂功能了喔!<br>在正式開始撰寫前，我們先開啟終端機<br>依序安裝<br>npm install ffmpeg-static<br>npm install opusscript<br>跟<br>npm install ytdl-core</p><p><img src="https://i.imgur.com/zYAoHnj.png" alt="9-3"></p><p>記得路徑要在project的根目錄下</p><p>這些都是discordBot要播放音樂時需要的插件<br>其中ytdl-core是後續抓取youtube歌曲的library，會需要透過程式來調用<br>所以安裝完之後，我們還要在最上面引用ytdl-core</p><p><img src="https://i.imgur.com/zyCqZa8.png" alt="9-4"></p><p>這樣一來，撰寫音樂系統的前置作業都算完成了!<br>那麼接下來就該開始撰寫程式囉?nonono</p><p>實際上我們在撰寫程式前應該先去參考網路上是否有重複的功能可以參考</p><p>既然要寫音樂系統，那當然必需先參考其他人的音樂機器人是怎麼寫的囉!</p><hr><h1 id="音樂系統整理"><a href="#音樂系統整理" class="headerlink" title="音樂系統整理"></a>音樂系統整理</h1><p>Discord 教學 - 如何簡單加音樂機器人進伺服器 (Rythm)<br><a href="https://fightwennote.blogspot.com/2018/06/discord-rythm.html">https://fightwennote.blogspot.com/2018/06/discord-rythm.html</a></p><p>Rythm是筆者在研究音樂系統前，看過最多次的音樂Bot<br>Rythm的功能非常完善，觀察他的指令對於描繪心目中那個接收音樂指令的Bot架構十分有幫助</p><p><img src="https://i.imgur.com/INTGTOT.png" alt="9-5"></p><p><img src="https://i.imgur.com/sIgLCsj.png" alt="9-6"></p><p>!play (網址)</p><p>提供youtube音樂的網址，bot需判斷網址是否符合規範，是不是抓得到歌<br>並且判斷使用者是不是在語音頻道，一切都正常無誤後反饋音樂資訊並且播放歌曲</p><p><img src="https://i.imgur.com/XNDlGTj.png" alt="9-7"></p><p>!replay</p><p>輸入此指令後，讓歌曲重頭開始播放<br>與play一樣，如果使用者不在音樂頻道中，則此指令失效</p><p><img src="https://i.imgur.com/rHmPN8m.png" alt="9-8"></p><p>!np </p><p>顯示當前播放歌曲資訊</p><p><img src="https://i.imgur.com/wqhXg2H.png" alt="9-9"></p><p>!queue</p><p>顯示歌曲清單</p><p><img src="https://i.imgur.com/mfzApM9.png" alt="9-10"></p><p>!skip</p><p>跳過當前播放曲目</p><hr><p>其他還有循環播放，單曲循環，請機器人退出語音廳等…</p><p>我們大概知道了，一個音樂系統需要<br>前綴詞(!)，表示我現在下的指令是音樂系統</p><p>音樂指令(play)，表示我在音樂系統中要使用哪一個功能</p><p>內容(xxx.com.tw)，不是一定會有，當指定功能需要參數時，我們需要給予他對應的內容</p><p>間隔符號(空格) 用來將音樂指令與內容分隔開的決定性符號</p><p><img src="https://i.imgur.com/J7cWTuc.png" alt="9-11"></p>]]></content>
    
    
    <categories>
      
      <category>鐵人賽</category>
      
      <category>用Node.js製作後台零負擔的DiscordBot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>node.js</tag>
      
      <tag>discord</tag>
      
      <tag>教學</tag>
      
      <tag>12th鐵人賽</tag>
      
      <tag>discord.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day8 - 呃...他會需要更多前綴字</title>
    <link href="/2020/09/01/12thDay8/"/>
    <url>/2020/09/01/12thDay8/</url>
    
    <content type="html"><![CDATA[<p>昨天我們對message事件做了完善的前置判斷</p><p>如果你做的跟範例一樣，這時我們可以在 ! 後面加入任何字串，來命令機器人做對應的事情</p><p>假設之後機器人的指令不斷增加，除了單純的文字回覆，可能還會有查表，投票，管理員指令，權限控制與音樂功能等</p><p>這種時候、比起單純的只使用!，機器人支援多種前綴詞顯然是更好的分類手段<br>今天我們進一步修改昨天已經完善的message框架，並且做出音樂功能(假)</p><hr><p>首先，請幫我在DiscordBot資料夾內新增一個JSONHome資料夾，把auth.json放進去，然後新增一個prefix.json檔</p><p><img src="https://i.imgur.com/fW5erlr.png" alt="8-1"><br><img src="https://i.imgur.com/0Io1ydQ.png" alt="8-2"></p><p>(prefix.json的內容)</p><p>bot.js的最上方幫我加載prefix.json</p><p><img src="https://i.imgur.com/0kIli9N.png" alt="8-3"></p><p>(auth.json的路徑記得也要一併修改喔!)</p><hr><p>我們把前綴字整理成了JSONArray物件<br>這樣一來，我們就做到了前綴字的統整，之後不管是新增或調用參數都會方便許多</p><p>然後我們把下面的message事件改成這樣</p><p><img src="https://i.imgur.com/m35t6Db.png" alt="8-4"></p><p>簡單來說就是從原本只判斷驚嘆號，變成只要前綴詞符合prefix.json內的任一Value就給過，並且由tempPrefix來接受符合條件的參數<br>同學們可以參考昨天的範例，來比對每一行的作用。</p><p>做到這裡，我們已經可以判斷多種前綴了，不過還沒在實作區判斷成功的是哪一個前綴<br>原本我們打!ping，機器人會回pong<br>現在打@ping也會通過了，如果prefix.json內的值不是@而是#或$$#@#$@甚麼的也一樣，依此類推<br>切割字串的方式也是可以動態化的，不過筆者不在此贅述。<br>我們繼續完善後續判斷</p><p><img src="https://i.imgur.com/wpLUo7R.png" alt="8-5"></p><p>這樣，如果使用者輸入!xxx，就會進入上方的文字回應功能<br>輸入@xxx，就會進入下方的音樂指令了</p><p><img src="https://i.imgur.com/xB8Rpkt.png" alt="8-6"></p><hr><p>音樂指令的部份我們明天繼續製作，以下是今天的完整程式碼:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> Discord = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;discord.js&#x27;</span>);<br><span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> Discord.Client();<br><span class="hljs-keyword">const</span> auth = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./JSONHome/auth.json&#x27;</span>);<br><span class="hljs-keyword">const</span> prefix = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./JSONHome/prefix.json&#x27;</span>);<br><br>client.login(auth.key);<br><br>client.on(<span class="hljs-string">&#x27;ready&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Logged in as <span class="hljs-subst">$&#123;client.user.tag&#125;</span>!`</span>);<br>&#125;);<br><br>client.on(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function"><span class="hljs-params">msg</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">//前置判斷</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (!msg.guild || !msg.member) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//訊息內不存在guild元素 = 非群組消息(私聊)</span><br>        <span class="hljs-keyword">if</span> (!msg.member.user) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//幫bot值多拉一層，判斷上層物件是否存在</span><br>        <span class="hljs-keyword">if</span> (msg.member.user.bot) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//訊息內bot值為正 = 此消息為bot發送</span><br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//字串分析</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">let</span> tempPrefix = <span class="hljs-string">&#x27;-1&#x27;</span>;<br>        <span class="hljs-keyword">const</span> prefixED = <span class="hljs-built_in">Object</span>.keys(prefix); <span class="hljs-comment">//前綴符號定義</span><br>        prefixED.forEach(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (msg.content.substring(<span class="hljs-number">0</span>, prefix[element].Value.length) === prefix[element].Value) &#123;<br>                tempPrefix = element;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">//實作</span><br>        <span class="hljs-keyword">switch</span> (tempPrefix) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-comment">//文字回應功能</span><br>                <span class="hljs-keyword">const</span> cmd = msg.content.substring(prefix[tempPrefix].Value.length).split(<span class="hljs-string">&#x27; &#x27;</span>); <span class="hljs-comment">//以空白分割前綴以後的字串</span><br>                <span class="hljs-keyword">switch</span> (cmd[<span class="hljs-number">0</span>]) &#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;ping&#x27;</span>:<br>                        msg.channel.send(<span class="hljs-string">&#x27;pong&#x27;</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;老婆&#x27;</span>:<br>                        msg.reply(<span class="hljs-string">&#x27;你沒有老婆!!&#x27;</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;myAvatar&#x27;</span>:<br>                        <span class="hljs-keyword">const</span> avatar = GetMyAvatar(msg);<br>                        <span class="hljs-keyword">if</span> (avatar.files) msg.channel.send(<span class="hljs-string">`<span class="hljs-subst">$&#123;msg.author&#125;</span>`</span>, avatar).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123; <span class="hljs-built_in">console</span>.log(err) &#125;);<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-comment">//音樂指令</span><br>                msg.channel.send(<span class="hljs-string">&#x27;music&#x27;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;OnMessageError&#x27;</span>, err);<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">//獲取頭像</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetMyAvatar</span>(<span class="hljs-params">msg</span>) </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">files</span>: [&#123;<br>                <span class="hljs-attr">attachment</span>: msg.author.displayAvatarURL(<span class="hljs-string">&#x27;png&#x27;</span>, <span class="hljs-literal">true</span>),<br>                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;avatar.jpg&#x27;</span><br>            &#125;]<br>        &#125;;<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;GetMyAvatar,Error&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>鐵人賽</category>
      
      <category>用Node.js製作後台零負擔的DiscordBot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>node.js</tag>
      
      <tag>discord</tag>
      
      <tag>教學</tag>
      
      <tag>12th鐵人賽</tag>
      
      <tag>discord.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day7 - 你的Bot需要一個前綴字</title>
    <link href="/2020/09/01/12thDay7/"/>
    <url>/2020/09/01/12thDay7/</url>
    
    <content type="html"><![CDATA[<p>今天接續昨天的主題，進一步修改message方法</p><p>正常我們在Discord上看到別人玩bot的指令都是有一個前綴字，後面附帶著指令的<br>例如: !help $dice</p><p>之類的，今天我們要來完成這個需求，並且把前置防呆做好</p><p><img src="https://i.imgur.com/biTOOUy.png" alt="7-1"></p><p>(終於要開始來爆改啦)</p><h2 id="前置判斷"><a href="#前置判斷" class="headerlink" title="前置判斷"></a>前置判斷</h2><p>除了判斷訊息是否是機器人以外，我希望機器人只回應來自群組的消息</p><p><img src="https://i.imgur.com/aDj39xo.png" alt="7-2"></p><p>因為message物件屬於discord包好給我們的，擔心有哪一層物件的錯誤導致整個機器人崩潰，我希望在前置判斷增加嚴謹性與try catch</p><p><img src="https://i.imgur.com/Ic1KoYn.png" alt="7-3"></p><p>如果這一段出錯的話，可以在catch中log錯誤訊息喔!</p><h2 id="字串分析"><a href="#字串分析" class="headerlink" title="字串分析"></a>字串分析</h2><p>我們希望可以在定義出前置符號後，只接取來自前置符號正確的內容，再判斷後面的內容</p><p><img src="https://i.imgur.com/PJZ8fnf.png" alt="7-4"></p><h2 id="功能實作"><a href="#功能實作" class="headerlink" title="功能實作"></a>功能實作</h2><p>最後我們把之前的行為修改一下後放回去實作區</p><p><img src="https://i.imgur.com/kEshR77.png" alt="7-5"></p><p>從原本的if改成switch，這樣我們如果要新增新的判斷式就會快速許多<br>原本判斷的msg.content改成了cmd[0]</p><p><img src="https://i.imgur.com/KWR5SHY.png" alt="7-6"></p><p>運行一下，結果就跟我們要的一樣了!</p><p>最後再稍微加一些範例</p><p><img src="https://i.imgur.com/Omv4wA5.png" alt="7-7"><br><img src="https://i.imgur.com/Q3wnJHS.png" alt="7-8"></p><hr><p>今天的完整程式碼如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> Discord = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;discord.js&#x27;</span>);<br><span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> Discord.Client();<br><span class="hljs-keyword">const</span> auth = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./auth.json&#x27;</span>);<br><br>client.login(auth.key);<br><br>client.on(<span class="hljs-string">&#x27;ready&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Logged in as <span class="hljs-subst">$&#123;client.user.tag&#125;</span>!`</span>);<br>&#125;);<br><br>client.on(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function"><span class="hljs-params">msg</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">//前置判斷</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (!msg.guild || !msg.member) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//訊息內不存在guild元素 = 非群組消息(私聊)</span><br>        <span class="hljs-keyword">if</span> (!msg.member.user) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//幫bot值多拉一層，判斷上層物件是否存在</span><br>        <span class="hljs-keyword">if</span> (msg.member.user.bot) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//訊息內bot值為正 = 此消息為bot發送</span><br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//字串分析</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> prefix = <span class="hljs-string">&#x27;!&#x27;</span> <span class="hljs-comment">//前綴符號定義</span><br>        <span class="hljs-keyword">if</span> (msg.content.substring(<span class="hljs-number">0</span>, prefix.length) === prefix) <span class="hljs-comment">//如果訊息的開頭~前綴字長度的訊息 = 前綴字</span><br>        &#123;<br>            <span class="hljs-keyword">const</span> cmd = msg.content.substring(prefix.length).split(<span class="hljs-string">&#x27; &#x27;</span>); <span class="hljs-comment">//以空白分割前綴以後的字串</span><br><br>            <span class="hljs-comment">//功能實作</span><br>            <span class="hljs-keyword">switch</span> (cmd[<span class="hljs-number">0</span>]) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;ping&#x27;</span>:<br>                    msg.channel.send(<span class="hljs-string">&#x27;pong&#x27;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;老婆&#x27;</span>:<br>                    msg.reply(<span class="hljs-string">&#x27;你沒有老婆!!&#x27;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;myAvatar&#x27;</span>:<br>                    <span class="hljs-keyword">const</span> avatar = GetMyAvatar(msg);<br>                    <span class="hljs-keyword">if</span> (avatar.files) msg.channel.send(<span class="hljs-string">`<span class="hljs-subst">$&#123;msg.author&#125;</span>`</span>, avatar);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;OnMessageError&#x27;</span>, err);<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">//獲取頭像</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetMyAvatar</span>(<span class="hljs-params">msg</span>) </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">files</span>: [&#123;<br>                <span class="hljs-attr">attachment</span>: msg.author.displayAvatarURL,<br>                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;avatar.jpg&#x27;</span><br>            &#125;]<br>        &#125;;<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;GetMyAvatar,Error&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>完工~!</p>]]></content>
    
    
    <categories>
      
      <category>鐵人賽</category>
      
      <category>用Node.js製作後台零負擔的DiscordBot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>node.js</tag>
      
      <tag>discord</tag>
      
      <tag>教學</tag>
      
      <tag>12th鐵人賽</tag>
      
      <tag>discord.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day6 - 防呆觀念</title>
    <link href="/2020/09/01/12thDay6/"/>
    <url>/2020/09/01/12thDay6/</url>
    
    <content type="html"><![CDATA[<p>昨天我們大致說明了關於bot.js的運作<br>今天對library文檔做一些補充，以及程序防呆概念</p><p>昨天我們介紹bot.js時，有提到client在監聽message事件時，會回傳一message物件</p><p><img src="https://i.imgur.com/72h5m9a.png" alt="6-1"></p><p>我們將message物件取名為msg，並且從msg中撈出content來檢查訊息內容，用reply來回傳訊息到訊息原本的頻道。</p><p>這些功能都可以從library文檔中找到，我們開啟昨天的discord.js文檔，然後在左側的功能列表中找到Message</p><p><img src="https://i.imgur.com/UUCJ4Zw.png" alt="6-2"></p><p>這就是client監聽事件後帶回給我們的物件了，左側是變數，右側是方法<br>可以看到content在左側，在右側可以找到reply</p><p>所以如果要對msg有進一步的調用，我們都必須來看文檔，了解這個library提供了哪些功能給開發者。</p><p>在前面，我多次強調client監聽，獲得message事件這件事情<br>discord.js的功能使用是基於物件，也就是想做到甚麼事情、要先了解這件事情該調用哪個物件合適</p><p><img src="https://i.imgur.com/g7wSDiK.png" alt="6-3"></p><p>這是我們昨天使用的回傳訊息的方式，也是discord.js包好給我們的方式</p><p><img src="https://i.imgur.com/qsapj00.png" alt="6-4"></p><p>這是透過message物件獲得他所屬的channel(頻道)物件，再指定我要從這個channel底下send(發送)我要發送的訊息。</p><p>除非原本要做的行為很簡單，以及需要tag訊息來源user，這種情況才會使用reply<br>不然正常我們是使用msg.channel.send，這種寫法就不會再在訊息前方自動tag使用者了，且傳入的內容也不局限於文字；<br>之後如果要新增甚麼功能，也都是依這個邏輯下去文檔尋找。</p><hr><p>讓我們回來到今天的主題，我們要稍微的修改一下我們的程式</p><p><img src="https://i.imgur.com/gSQ2dXd.png" alt="6-5"></p><p>為了讓bot之後更好修改內容，我們將msg.reply統一改成msg.channel.send</p><p><img src="https://i.imgur.com/rTgjNW0.png" alt="6-6"></p><p>眼尖的同學應該注意到了，筆者除了修改reply以外，還把pong改成ping了<br>這是為了後續的測試，同學們可以運行起來，看看效果</p><p><img src="https://i.imgur.com/myPjROx.png" alt="6-7"></p><p>機器人的訊息傳送停不下來了!<br>這是因為機器人傳送訊息的同時，也代表著client會再接到一個message事件，這是機器人自己的訊息，同時他也觸發了機器人的下一個訊息回應，這就導致了無限迴圈</p><p>同學們可以先在終端機上面用ctrl+c來強制中止程序<br><img src="https://i.imgur.com/vr8LN0C.png" alt="6-8"></p><p>那麼，我們該怎麼迴避這個問題呢?</p><ul><li>讓程序的回應不要跟判斷的句子一樣</li><li>判斷訊息來源</li></ul><p>第一種作法就是說改成像之前一樣ping回pong<br>因為判斷與觸發的句子不一樣，就不會有問題了<br>但如果之後程序變得龐大，或是我們的觸發與回應句可以供其他人添加的話，第一種作法就會比較沒辦法達成我們的需求</p><p>第二種作法就是在client監聽到message事件時，先判斷訊息來源是否符合條件，套在現在的問題的話就是我們要判斷是不是bot<br>這樣做，除了我們的程序不會再因為自己的話無限自閉以外，對於有多機器人的群組，也就不會去理會其他機器人的訊息了，大家各自服務。</p><p><img src="https://i.imgur.com/tKiHz04.png" alt="6-9"></p><p>只要msg.member.user.bot這個參數是true，就代表訊息來自於機器人，不會再處理下面的事情，是不是很簡單呢?</p>]]></content>
    
    
    <categories>
      
      <category>鐵人賽</category>
      
      <category>用Node.js製作後台零負擔的DiscordBot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>node.js</tag>
      
      <tag>discord</tag>
      
      <tag>教學</tag>
      
      <tag>12th鐵人賽</tag>
      
      <tag>discord.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day5 - 函式庫文檔與基本範例講解</title>
    <link href="/2020/09/01/12thDay5/"/>
    <url>/2020/09/01/12thDay5/</url>
    
    <content type="html"><![CDATA[<p>昨天我們成功叫醒了自己的兒子/女兒</p><p>在繼續教育小孩(增加功能)前，今天想說說昨天安裝的discord.js這個工具</p><p>該怎麼使用，以及應用後的例子</p><p>discord.js是node.js中的一個library，也就是其他人寫好的程式集<br>我們可以安裝他人發佈的程式並且引用，進而降低開發的難度與作業性</p><p><a href="https://discord.js.org/#/">https://discord.js.org/#/</a></p><p>這是discord.js的文檔庫，裡面有此庫作者撰寫的使用說明，涵蓋了從以前到現在的發行版本，以及各種小細節</p><p>進來後，我們點擊最下面的Get Started</p><p><img src="https://i.imgur.com/lzlZZCz.png" alt="5-1"></p><p>左側是discord.js的可用資源與方法，預設會在welcome頁面，這裡會介紹discord.js的功能與基本知識，我們先往下拉到 Example usage</p><p><img src="https://i.imgur.com/yAsK0m7.png" alt="5-2"></p><p>這是discord.js的基本範例，拿來跟昨天的bot.js比對一下，是不是完全一樣呢?<br>只是範例中的 client.login(‘token’); 被我拉上去了；</p><p>這是因為在筆者的腦中，給機器人輸入key值是最優先的事情，再來依次進入ready(登入完成)-&gt;message(訊息接收)…不然各區塊的上下順序在這邊其實是沒有差別的。</p><p><img src="https://i.imgur.com/JJAMzjd.png" alt="5-3"></p><p>下面說回來目前bot.js每一行的功效</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">const Discord</span> = require(<span class="hljs-string">&#x27;discord.js&#x27;</span>);<br></code></pre></td></tr></table></figure><p>這行的意思是引用discord.js這個工具，然後賦予到Discord這個常數(const)上<br>之後如果要引用discord.js的程式碼，都可以直接調用Discord來實現!</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> Discord.<span class="hljs-built_in"><span class="hljs-built_in">Client</span></span>();<br></code></pre></td></tr></table></figure><p>新宣告一個 Discord(discord.js)下的Client方法，然後將Client方法的結果賦予到client這個常數上<br>之後如果要引用discord.js底下的Client，可以直接呼叫client。</p><p>這邊我們額外從Discord中拉出Client()是因為這個client是要用來當bot本體的，也就是我們的遙控器(x</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">const auth</span> = require(<span class="hljs-string">&#x27;./auth.json&#x27;</span>);<br></code></pre></td></tr></table></figure><p>引用同目錄(./)下的auth.json，賦予給auth這個常數<br>之後想調用auth.json底下的資源，可以直接呼叫auth。</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">client.log<span class="hljs-meta">in(</span>auth.<span class="hljs-meta">key</span>);<br></code></pre></td></tr></table></figure><p>執行client的登入行為，登入的key我們放入bot的key</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">client.<span class="hljs-literal">on</span>(<span class="hljs-string">&#x27;ready&#x27;</span>, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(`<span class="javascript">Logged <span class="hljs-keyword">in</span> <span class="hljs-keyword">as</span> $&#123;client.user.tag&#125;!</span>`);<br>&#125;);<br></code></pre></td></tr></table></figure><p>執行client的監聽(on)行為，要監聽的事件是ready(準備完成)<br>只要client收到ready事件，就執行右邊的箭頭函式( () =&gt; {} )<br>箭頭函式的內容為</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">console.log(`<span class="hljs-keyword">Logged</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">as</span> $&#123;client.<span class="hljs-keyword">user</span>.tag&#125;!`);<br></code></pre></td></tr></table></figure><p>在控制台打印(console.log) 出字串 Logged in as ${client.user.tag}!<br>Logged in as就是單純的字串<br>其中client.user.tag，我們可以從小數點來了解到，user是client底下的一個可用變數，tag則是user底下的一個可用變數<br>最後輸出的結果就是機器人的名字與id<br>如果要仔細了解client的內容物，可以將console.log裡面的東西改成client看看</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart">client.<span class="hljs-keyword">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, msg =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (msg.content === <span class="hljs-string">&#x27;ping&#x27;</span>) &#123;<br>        msg.reply(<span class="hljs-string">&#x27;pong&#x27;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>監聽client的message(收到訊息)事件，觸發後執行箭頭函式 msg =&gt;{}</p><p>這邊的msg是每當client收到message時，discord.js會給予我們的變數，我們將變數稱作msg<br>因為discord.js會回傳的變數是固定的，如果我們這邊像上面一樣寫成() =&gt; {}的話，雖然也可以執行但就不會將discord.js回傳的值再做處理。<br>反過來說，如果我們宣告了msg1跟msg2兩個變數來接回傳值，因為discord.js的message事件並沒有給我們這麼多參數，所以msg2是接收不到東西的</p><p>那麼要怎麼知道message事件下到底回傳了哪些參數呢?<br>這就要用到剛剛說的discord.js使用說明書了</p><p><a href="https://discord.js.org/#/docs/main/stable/class/Client?scrollTo=e-message">https://discord.js.org/#/docs/main/stable/class/Client?scrollTo=e-message</a></p><p><img src="https://i.imgur.com/mtq2Iqi.png" alt="5-4"></p><p>我們監聽message事件的說明在左側元素列表的client分類中的Events中可以找到，可以看到他回傳了 Message Type的變數，而這就是我們接收的內容。</p><p>繼續說箭頭函數內要做的事情</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">if</span> (msg.content === <span class="hljs-string">&#x27;ping&#x27;</span>) &#123;<br>        <span class="hljs-selector-tag">msg</span><span class="hljs-selector-class">.reply</span>(<span class="hljs-string">&#x27;pong&#x27;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>當msg變數底下的content元素，等於ping字串時，執行方法</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">msg</span><span class="hljs-selector-class">.reply</span>(<span class="hljs-string">&#x27;pong&#x27;</span>);<br></code></pre></td></tr></table></figure><p>使用msg底下的replay方法，並傳入pong字串。</p><p>以上的文言文翻譯過來就是<br>機器人(client)接收到訊息(message)的時候，去判斷訊息的內容(content)是不是ping<br>如果是，回傳pong(msg.reply)</p><p><img src="https://i.imgur.com/ZZr9Cqx.png" alt="5-5"></p><p>先說到這，今天根據程式一行行做解釋，雖然很基本但對第一次觸碰這部分的人來說應該還是有點艱澀</p><p>請自行斟酌閱讀即可，明天我們說說如何讓機器人變得更聰明。</p>]]></content>
    
    
    <categories>
      
      <category>鐵人賽</category>
      
      <category>用Node.js製作後台零負擔的DiscordBot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>node.js</tag>
      
      <tag>discord</tag>
      
      <tag>教學</tag>
      
      <tag>12th鐵人賽</tag>
      
      <tag>discord.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day4 - 機器人的家</title>
    <link href="/2020/09/01/12thDay4/"/>
    <url>/2020/09/01/12thDay4/</url>
    
    <content type="html"><![CDATA[<p>昨天我們成功創建了自己的機器人並且加入群組</p><p><img src="https://i.imgur.com/4nFmZyM.png" alt="4-1"></p><p>可是機器人加入後怎麼都在睡覺，我怎麼找不到地方操作呢?</p><p>那是因為我們昨天做的事情是在Discord申請一個機器人帳戶而已~<br>就像我們的Discord帳戶需要透過Discord登入，Bot其實也需要登入喔</p><p>不過Bot的登入路口是要”自己寫”的，今天我們就來叫機器人起床吧!</p><hr><h1 id="環境安裝"><a href="#環境安裝" class="headerlink" title="環境安裝"></a>環境安裝</h1><p>首先請確保你已經安裝</p><p>Node.js<br><a href="https://ithelp.ithome.com.tw/articles/10199058">安裝教學</a></p><p>Node.js是我們機器人會使用到的後端語言<br>Node.js屬於弱型別語言，相較於其他語言，Node.js編譯前的限制較少，寫起來通常會感到較為自由<br>不過如果對於自己寫的東西不夠了解，弱型別語言並不一定能幫你抓出問題，導致你的問題直到實際運行時才會發生；<br>所以使用Node.js時、知道自己寫的東西具備甚麼效果是重要的</p><p>VSCode<br><a href="https://code.visualstudio.com/">下載路徑</a><br><a href="https://wcc723.github.io/development/2019/12/01/vscode-chinese/">中文化教學</a></p><p>VSCode是筆者愛用的編輯器<br>VSCode本身體積很小，同時又支援許多的擴充套件，上面的中文化教學正是其中之一<br>因此VSCode可以輕鬆的做到客製化，且不改變他的體積簡約。</p><p>如果同學們原本就有在使用的編輯器，VSCode可以跳過不安裝</p><hr><h1 id="蓋一個機器人的家"><a href="#蓋一個機器人的家" class="headerlink" title="蓋一個機器人的家"></a>蓋一個機器人的家</h1><p>首先我們要先替機器人做一個”家”，我們先在自己喜歡的地方建一個資料夾，名字先取作DiscordBot就可以了</p><p><img src="https://i.imgur.com/62P5P4i.png" alt="4-2"></p><p>一個機器人的家裡面，我們基本需要…<br>機器人的工具箱(node_modules)<br>機器人與工具箱的說明書(package.json)<br>一隻機器人本體(bot.js)<br>門牌號碼(auth.json)<br><img src="https://i.imgur.com/vohV8ms.png" alt="4-3"></p><p>像這樣子<br>(看到package-lock.json是你業障重，別刪掉也別管他)</p><p>其中，node_modules跟package.json是透過node.js自動生成的，要生成這兩個東西，我們需要先在DiscordBot這個資料夾打開vscode</p><p><img src="https://i.imgur.com/WP2M2GQ.png" alt="4-4"><br><img src="https://i.imgur.com/FFxXcMQ.png" alt="4-5"></p><p>成功的話，左邊的路徑就會顯示資料夾名稱喔!<br>然後選擇上方的開啟終端機-&gt;新增終端<br>確認終端上面顯示的路徑是正確的後，在終端上面鍵入npm init</p><p><img src="https://i.imgur.com/mZhlOAv.png" alt="4-6"></p><p>這是node的初始化行為<br>會要你輸入一些關於這個project的基本資料，之後輸出在package.json  </p><p><img src="https://i.imgur.com/d095eIo.png" alt="4-7"></p><p>就像這樣!</p><p>然後我們再手動創建bot.js檔與auth.json檔</p><p><img src="https://i.imgur.com/gE4hfc7.png" alt="4-8"></p><p><img src="https://i.imgur.com/ObeweYi.png" alt="4-9"></p><p>如果說bot.js是機器人的本體，那auth.json就是機器人的內部授權碼<br>auth.json裡面的key代表的是機器人的啟動鑰匙，把鑰匙插進對應的地方才能啟動(有找到bot.js裡面有一行auth.key嗎?)</p><p>這邊我們把昨天在bot頁存下來的key放到your key value裡面，注意不要刪掉””</p><p>兩個檔案都創建好後記得存檔，我們回到終端機輸入<br>npm install discord.js</p><p><img src="https://i.imgur.com/hbEYTK9.png" alt="4-10"></p><p><img src="https://i.imgur.com/nIETLkm.png" alt="4-11"></p><p>輸入 npm install discord.js後，node.js就會幫我們安裝discord.js這個工具<br>然後把檔案放在node_modules裡面，再到package.json底下紀錄我們使用了哪些工具</p><p>沒問題的話，最後我們在終端機輸入node bot</p><p><img src="https://i.imgur.com/yEANgJU.png" alt="4-12"></p><p><img src="https://i.imgur.com/1Q4C2Q4.png" alt="4-13"></p><p>成功!明天我們會再針對今天的程式碼做講解</p>]]></content>
    
    
    <categories>
      
      <category>鐵人賽</category>
      
      <category>用Node.js製作後台零負擔的DiscordBot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>node.js</tag>
      
      <tag>discord</tag>
      
      <tag>教學</tag>
      
      <tag>12th鐵人賽</tag>
      
      <tag>discord.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day -</title>
    <link href="/2020/09/01/12thDay/"/>
    <url>/2020/09/01/12thDay/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>鐵人賽</category>
      
      <category>用Node.js製作後台零負擔的DiscordBot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>node.js</tag>
      
      <tag>discord</tag>
      
      <tag>教學</tag>
      
      <tag>12th鐵人賽</tag>
      
      <tag>discord.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day3 - 你自己的...他叫甚麼名字?</title>
    <link href="/2020/09/01/12thDay3/"/>
    <url>/2020/09/01/12thDay3/</url>
    
    <content type="html"><![CDATA[<p>今天來說說怎麼創建Bot</p><p>建立DiscordBot，首先要有一個Discord帳號</p><p>到<a href="https://discordapp.com/developers/applications/">這個網站</a></p><p>登入帳號後，右上角會有一個[ New Application ]</p><p><img src="https://i.imgur.com/QeKQ4fK.png" alt="NewApplication"></p><p>這邊的名字是”應用名稱”<br>同時也會是預設的機器人名稱，仔細想好後就送出吧~</p><p><img src="https://i.imgur.com/kXSwy3I.png" alt="basicUI"></p><p>送出後就會進來應用介面了</p><p>點擊頭像可替換應用的大頭貼，名字就是你剛剛取的</p><p>都設定好之後，我們點選左邊列表第三排的Bot</p><p><img src="https://i.imgur.com/r1NSe8O.png" alt="BotUI"></p><p>第一次點應該會問你是否要建立，點選是<br>這樣Discord就會幫你的機器人實際創建一個帳戶<br>點擊右邊TOKEN底下的Copy，他會給你一組很長的亂碼</p><h2 id="先存在記事本，我們明天會用到"><a href="#先存在記事本，我們明天會用到" class="headerlink" title="先存在記事本，我們明天會用到"></a><strong>先存在記事本，我們明天會用到</strong></h2><hr><p>接下來我們點左邊的OAuth2</p><p><img src="https://i.imgur.com/o5eSFy6.png" alt="Oauth2UI"></p><p>這是創建邀請連結的地方，SCOPES欄的部份點Bot，這樣下面就會出現第二欄<br>下面是要給予機器人在群組內的權限，需要根據Bot實際上具備哪些功能，來判斷需要給予哪些權限<br>如果不知道怎麼用，先選Administrator就可以了。</p><p>都做完後，中間的就會有完整的邀請連結，請複製後輸入在瀏覽器上</p><p><img src="https://i.imgur.com/9oCUzUZ.png" alt="url"></p><p>使用此連結，就可以把Bot拉入你的群組內，前提是你在此群組有管理者權限喔</p><p><img src="https://i.imgur.com/nJ3jUuW.png" alt="su"></p><p>喔耶，成功了!</p>]]></content>
    
    
    <categories>
      
      <category>鐵人賽</category>
      
      <category>用Node.js製作後台零負擔的DiscordBot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>node.js</tag>
      
      <tag>discord</tag>
      
      <tag>教學</tag>
      
      <tag>12th鐵人賽</tag>
      
      <tag>discord.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day2 - DiscordBot - 小愛麗絲</title>
    <link href="/2020/09/01/12thDay2/"/>
    <url>/2020/09/01/12thDay2/</url>
    
    <content type="html"><![CDATA[<p>在今天的文章開始前，想先跟大家介紹我家的女兒</p><p><img src="https://i.imgur.com/jnSGjxu.png" alt="小愛麗絲"><br><a href="https://supr.link/COL1X">我是連結</a></p><p>小愛麗絲，生日是2020年6月1日</p><p>明明感覺已經做了很久，其實是六月時才開始做到現在</p><p>興趣是吐槽別人，喜歡唱歌，希望大家能多多認識她</p><p>這篇鐵人賽的文章內容基本會依照小愛麗絲現有的功能做講解，需要範例時可以參考看看~</p><hr><p>那麼，今天主要是要來講講本次鐵人賽的大鋼</p><p>關於一個機器人，為什麼想要做機器人，該做哪些功能，以及後台零負擔是甚麼意思等</p><p>哼哼，很好奇吧</p><p>這麼重要的問題就要從最開始講起，各位客官且聽我娓娓道來</p><p>程式的產生是建立在需求上的，就像人需要吃早餐所以這世界上有了早餐店</p><p>我希望可以製作一隻Bot供我認識的人們娛樂，所以小愛麗絲誕生了</p><p>最初，小愛只會針對2~3個句子回應固定的答案</p><p><img src="https://i.imgur.com/cew9uKd.png" alt="解放"> </p><p>想供大家娛樂-&gt;小愛學會說話</p><hr><p>大家希望可以教小愛說話，不再是我自己新增，小愛開始學會不同的詞</p><p> <img src="https://i.imgur.com/r7sSFlZ.png" alt="teach"></p><p>出現了希望新增詞彙的聲音-&gt;所以小愛開始背單字</p><hr><p>跟朋友的認識是圍繞著某款遊戲，為了讓查詢遊戲資料方便，希望小愛能幫忙查表</p><p> <img src="https://i.imgur.com/MZNmVDc.png" alt="查表"></p><p>想在聊天時可以直接找資料-&gt;增加爬蟲功能</p><hr><p>因為後來指令增加，為了方便閱讀所以增加說明書</p><p><img src="https://i.imgur.com/FxYPkWv.png" alt="help"></p><p>其他還有音樂，圖片，權限控制等等…</p><hr><p>舉了些例子，想說的是、機器人的功能是多樣化的，想做甚麼取決於需求；<br>本文會圍繞著Node.js該如何製作一隻機器人為主軸，分享目前的程式寫法&amp;講解<br>以及如何做到24HR的主機&amp;資料庫託管等</p><p>礙於篇幅限制，之後文章沒辦法把機器人的功能一個一個寫成教學，有特別希望學甚麼的話再問看看吧~</p><p>最後，希望各位有空可以多跟小愛聊天，我們明天見~</p>]]></content>
    
    
    <categories>
      
      <category>鐵人賽</category>
      
      <category>用Node.js製作後台零負擔的DiscordBot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>node.js</tag>
      
      <tag>discord</tag>
      
      <tag>教學</tag>
      
      <tag>12th鐵人賽</tag>
      
      <tag>discord.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day1 - 甚麼是DiscordBot?</title>
    <link href="/2020/09/01/12thDay1/"/>
    <url>/2020/09/01/12thDay1/</url>
    
    <content type="html"><![CDATA[<h2 id="DiscordBot-是…"><a href="#DiscordBot-是…" class="headerlink" title="DiscordBot 是…"></a>DiscordBot 是…</h2><p>DiscordBot顧名思義就是在Discord上運作的Bot<br>Discord是平台，Bot是機器人、也就是我們的程式</p><hr><h2 id="DiscordBot-可以做到…"><a href="#DiscordBot-可以做到…" class="headerlink" title="DiscordBot 可以做到…"></a>DiscordBot 可以做到…</h2><p>DiscordBot與一般Bot的不同正是他依附於Discord<br>即是說，他的主要目的在於跟Discord的互動<br>我在Discord上的行為被Bot接收-&gt;Bot再回饋結果給我</p><p>聊天，天氣預測，播放音樂，查詢訊息…<br>廣泛來說，只要你是你會寫的東西，都可以塞進去實現(廢話)</p><hr><h2 id="如果我做一隻DiscordBot…"><a href="#如果我做一隻DiscordBot…" class="headerlink" title="如果我做一隻DiscordBot…"></a>如果我做一隻DiscordBot…</h2><p>Discord屬於時下流行的通訊軟體之一，不管是從事商業或是娛樂，Discord絕對是值得你嘗試接觸的</p><p>得益於Discord提供豐富的功能，讓DiscordBot可以以簡單的程式碼做到複雜的事情，不管是為了完成需求亦或是學生想練手，都會是不錯的銜接題目</p><hr><h2 id="製作一隻DiscordBot會很困難嗎…"><a href="#製作一隻DiscordBot會很困難嗎…" class="headerlink" title="製作一隻DiscordBot會很困難嗎…"></a>製作一隻DiscordBot會很困難嗎…</h2><p>完全不會!製作一隻Bot是容易的，有教學更是事半功倍</p><p>接下來30天內、本文會一步步教學各位該如何製作一隻DiscordBot。</p>]]></content>
    
    
    <categories>
      
      <category>鐵人賽</category>
      
      <category>用Node.js製作後台零負擔的DiscordBot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>node.js</tag>
      
      <tag>discord</tag>
      
      <tag>教學</tag>
      
      <tag>12th鐵人賽</tag>
      
      <tag>discord.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
